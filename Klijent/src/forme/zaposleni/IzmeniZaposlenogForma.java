/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package forme.zaposleni;

import domen.OrganizacionaCelina;
import domen.RadnoMesto;
import domen.Zaposleni;
import java.text.SimpleDateFormat;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import kontroler.KlijentKontrolerZaposleni;
import modeli.ModelTabeleZaposleni;

/**
 *
 * @author Mihajlo
 */
public class IzmeniZaposlenogForma extends javax.swing.JDialog {

    /**
     * Creates new form IzmeniZaposlenogForma
     */
    ModelTabeleZaposleni mtz;
    Zaposleni odabraniZaposleni;
    public IzmeniZaposlenogForma(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
           initComponents();
           setLocationRelativeTo(null);
           setTitle("Izmena i Brisanje zaposlenog");
           btnObrisiZaposlenog.setEnabled(false);
           btnIzmeniZaposlenog.setEnabled(false);
           //tblZaposleni.setAutoCreateRowSorter(true);
           mtz = new ModelTabeleZaposleni();
           tblZaposleni.setModel(mtz);
           popuniTabeluSvimZaposlenim();
           popuniCmbOrganizacionaCelina();
        } catch (Exception ex) {
            ex.printStackTrace();
         }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPronadjiZaposlenog = new javax.swing.JPanel();
        txtPretragaZaposlenog = new javax.swing.JTextField();
        btnPronadjiZaposlenog = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblZaposleni = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnIzmeniZaposlenog = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtZaposleniID = new javax.swing.JTextField();
        txtZaposleniIme = new javax.swing.JTextField();
        txtZaposleniPrezime = new javax.swing.JTextField();
        txtZaposleniEmail = new javax.swing.JTextField();
        cmbZaposleniOrganizacionaCelina = new javax.swing.JComboBox<>();
        cmbZaposleniRadnoMesto = new javax.swing.JComboBox<>();
        txtZaposleniDatumZaposlenja = new javax.swing.JFormattedTextField();
        btnObrisiZaposlenog = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelPronadjiZaposlenog.setBorder(javax.swing.BorderFactory.createTitledBorder("Pronađi zaposlenog"));

        btnPronadjiZaposlenog.setText("Pronađi");
        btnPronadjiZaposlenog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPronadjiZaposlenogActionPerformed(evt);
            }
        });

        tblZaposleni.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblZaposleni.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblZaposleniMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblZaposleni);

        javax.swing.GroupLayout panelPronadjiZaposlenogLayout = new javax.swing.GroupLayout(panelPronadjiZaposlenog);
        panelPronadjiZaposlenog.setLayout(panelPronadjiZaposlenogLayout);
        panelPronadjiZaposlenogLayout.setHorizontalGroup(
            panelPronadjiZaposlenogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPronadjiZaposlenogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPronadjiZaposlenogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPronadjiZaposlenogLayout.createSequentialGroup()
                        .addComponent(txtPretragaZaposlenog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPronadjiZaposlenog))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelPronadjiZaposlenogLayout.setVerticalGroup(
            panelPronadjiZaposlenogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPronadjiZaposlenogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPronadjiZaposlenogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPretragaZaposlenog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPronadjiZaposlenog))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Učitani zaposleni"));

        btnIzmeniZaposlenog.setText("Izmeni zaposlenog");
        btnIzmeniZaposlenog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniZaposlenogActionPerformed(evt);
            }
        });

        jLabel1.setText("ID:");

        jLabel2.setText("Ime:");

        jLabel3.setText("Prezime:");

        jLabel4.setText("Email:");

        jLabel5.setText("Datum zaposlenja:");

        jLabel6.setText("Organizaciona celina:");

        jLabel7.setText("Radno mesto:");

        txtZaposleniID.setEditable(false);

        txtZaposleniEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtZaposleniEmailActionPerformed(evt);
            }
        });

        cmbZaposleniOrganizacionaCelina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbZaposleniOrganizacionaCelinaActionPerformed(evt);
            }
        });

        txtZaposleniDatumZaposlenja.setEditable(false);
        try {
            txtZaposleniDatumZaposlenja.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.##.####.")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btnObrisiZaposlenog.setText("Obriši zaposlenog");
        btnObrisiZaposlenog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiZaposlenogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnObrisiZaposlenog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIzmeniZaposlenog))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtZaposleniID)
                                    .addComponent(txtZaposleniIme)
                                    .addComponent(txtZaposleniPrezime)
                                    .addComponent(txtZaposleniEmail)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbZaposleniOrganizacionaCelina, 0, 234, Short.MAX_VALUE)
                                    .addComponent(cmbZaposleniRadnoMesto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtZaposleniDatumZaposlenja))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtZaposleniID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtZaposleniIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtZaposleniPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtZaposleniEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtZaposleniDatumZaposlenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cmbZaposleniOrganizacionaCelina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmbZaposleniRadnoMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIzmeniZaposlenog)
                    .addComponent(btnObrisiZaposlenog))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(538, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelPronadjiZaposlenog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(404, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelPronadjiZaposlenog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPronadjiZaposlenogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPronadjiZaposlenogActionPerformed
        try {
            String pretraga = txtPretragaZaposlenog.getText();
            LinkedList<Zaposleni> listaZaposlenihIzPretrage = KlijentKontrolerZaposleni.getInstanca().pronadjiPaVratiZaposlene(pretraga);
            ModelTabeleZaposleni mtz = (ModelTabeleZaposleni) tblZaposleni.getModel();
            mtz.setListaZaposlenih(listaZaposlenihIzPretrage);
            LinkedList<Zaposleni> vracenaLista = mtz.vratiListu();
            if(vracenaLista.size() == 0){
                JOptionPane.showMessageDialog(rootPane, "Sistem ne može da nađe zaposlenog po zadatoj vrednosti.", "Neuspešna pretraga.", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Sistem je našao zaposlenog po zadatoj vrednosti.", "Uspešno izvršeno.", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }//GEN-LAST:event_btnPronadjiZaposlenogActionPerformed

    private void btnIzmeniZaposlenogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniZaposlenogActionPerformed
        try {
//            KlijentKontrolerZaposleni.getInstanca().obrisiZaposlenog(odabraniZaposleni);
//            LinkedList<Zaposleni> listaSvihZaposlnih = KlijentKontrolerZaposleni.getInstanca().vratiZaposlene();
//            ModelTabeleZaposleni mtz = (ModelTabeleZaposleni) tblZaposleni.getModel();
//            mtz.setListaZaposlenih(listaSvihZaposlnih);
//            JOptionPane.showMessageDialog(rootPane, "Uspesno ste izmenili podatke zaposlenog: " + odabraniZaposleni);
//            txtZaposleniID.setText("");
//            txtZaposleniIme.setText("");
//            txtZaposleniPrezime.setText("");
//            txtZaposleniEmail.setText("");
//            txtZaposleniDatumZaposlenja.setText("");
//            cmbZaposleniOrganizacionaCelina.setSelectedIndex(-1);
//            cmbZaposleniRadnoMesto.setSelectedIndex(-1);
//            btnIzmeniZaposlenog.setEnabled(false);
            Zaposleni izmenjenZaposleni = new Zaposleni();
            if (proveriNovePodatke(izmenjenZaposleni)) {
                KlijentKontrolerZaposleni.getInstanca().izmeniZaposlenog(izmenjenZaposleni);
                JOptionPane.showMessageDialog(rootPane, "Sistem je zapamtio zaposlenog.", "Uspešno izvršeno.", JOptionPane.INFORMATION_MESSAGE);
                LinkedList<Zaposleni> listaSvihZaposlnih = KlijentKontrolerZaposleni.getInstanca().vratiZaposlene();
                ModelTabeleZaposleni mtz = (ModelTabeleZaposleni) tblZaposleni.getModel();
                mtz.setListaZaposlenih(listaSvihZaposlnih);
                btnObrisiZaposlenog.setEnabled(false);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            //JOptionPane.showMessageDialog(rootPane, "Zaposleni " + odabraniZaposleni + " nije izmenjen.", "Doslo je do greske!", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Doslo je do greske!", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnIzmeniZaposlenogActionPerformed

    private void txtZaposleniEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtZaposleniEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtZaposleniEmailActionPerformed

    private void cmbZaposleniOrganizacionaCelinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbZaposleniOrganizacionaCelinaActionPerformed
        try {  
            OrganizacionaCelina organizacionaCelina = (OrganizacionaCelina) cmbZaposleniOrganizacionaCelina.getSelectedItem();
            popuniCmbRadnoMesto(organizacionaCelina);
        } catch (Exception ex) {
            Logger.getLogger(DodajZaposlenogForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbZaposleniOrganizacionaCelinaActionPerformed

    private void tblZaposleniMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblZaposleniMouseClicked
        try{
            int red = tblZaposleni.getSelectedRow();
            if (red == -1) {
                //JOptionPane.showMessageDialog(this, "Odaberite zaposlenog iz tabele.");
            } else {
                ModelTabeleZaposleni mtz = (ModelTabeleZaposleni) tblZaposleni.getModel();
                odabraniZaposleni = mtz.vratiOdabranogZaposlenog(red);
                Zaposleni ucitaniZaposleni = KlijentKontrolerZaposleni.getInstanca().ucitajZaposlenog(odabraniZaposleni);
                popuniPodatkeUcitanogZaposlenog(ucitaniZaposleni);
                btnIzmeniZaposlenog.setEnabled(true);
                btnObrisiZaposlenog.setEnabled(true);
                JOptionPane.showMessageDialog(rootPane, "Sistem je učitao zaposlenog.", "Uspešno izvršeno.", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex){
            try {
                ex.printStackTrace();
                //JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Doslo je do greske!", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(rootPane, "Zaposleni " + odabraniZaposleni + " je obrisan.", "Doslo je do greske.", JOptionPane.INFORMATION_MESSAGE);
                LinkedList<Zaposleni> listaSvihZaposlnih = KlijentKontrolerZaposleni.getInstanca().vratiZaposlene();
                if (listaSvihZaposlnih.size() > 0) {
                    ModelTabeleZaposleni mtz = (ModelTabeleZaposleni) tblZaposleni.getModel();
                    mtz.setListaZaposlenih(listaSvihZaposlnih);
                } else if(listaSvihZaposlnih.size() == 0) {
                    JOptionPane.showMessageDialog(rootPane, "Obrisali ste sve zaposlene. Ne postoji nijedan zaposleni za prikaz.");
                    this.dispose();
                }
            } catch (Exception ex1) {
                ex1.printStackTrace();
            }
        }
    }//GEN-LAST:event_tblZaposleniMouseClicked

    private void btnObrisiZaposlenogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiZaposlenogActionPerformed
        try {
            KlijentKontrolerZaposleni.getInstanca().obrisiZaposlenog(odabraniZaposleni);
            JOptionPane.showMessageDialog(rootPane, "Sistem је obrisao zaposlenog: " + odabraniZaposleni, "Uspešno izvršeno.", JOptionPane.INFORMATION_MESSAGE);
            LinkedList<Zaposleni> listaSvihZaposlnih = KlijentKontrolerZaposleni.getInstanca().vratiZaposlene();
            if (listaSvihZaposlnih.size() > 0) {
                ModelTabeleZaposleni mtz = (ModelTabeleZaposleni) tblZaposleni.getModel();
                mtz.setListaZaposlenih(listaSvihZaposlnih);
            } else if(listaSvihZaposlnih.size() == 0) {
                JOptionPane.showMessageDialog(rootPane, "Obrisali ste sve zaposlene. Ne postoji nijedan zaposleni za prikaz.");
                this.dispose();
            }
            txtZaposleniID.setText("");
            txtZaposleniIme.setText("");
            txtZaposleniPrezime.setText("");
            txtZaposleniEmail.setText("");
            txtZaposleniDatumZaposlenja.setText("");
            cmbZaposleniOrganizacionaCelina.setSelectedIndex(0);
            cmbZaposleniRadnoMesto.setSelectedIndex(0);
            btnObrisiZaposlenog.setEnabled(false);
            btnIzmeniZaposlenog.setEnabled(false);

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "Zaposleni " + odabraniZaposleni + " nije obrisan.", "Doslo je do greske!", JOptionPane.ERROR_MESSAGE);
            //JOptionPane.showMessageDialog(rootPane, "Sistem ne može da obriše zaposlenog.", "Doslo je do greske!", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnObrisiZaposlenogActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeniZaposlenog;
    private javax.swing.JButton btnObrisiZaposlenog;
    private javax.swing.JButton btnPronadjiZaposlenog;
    private javax.swing.JComboBox<Object> cmbZaposleniOrganizacionaCelina;
    private javax.swing.JComboBox<Object> cmbZaposleniRadnoMesto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelPronadjiZaposlenog;
    private javax.swing.JTable tblZaposleni;
    private javax.swing.JTextField txtPretragaZaposlenog;
    private javax.swing.JFormattedTextField txtZaposleniDatumZaposlenja;
    private javax.swing.JTextField txtZaposleniEmail;
    private javax.swing.JTextField txtZaposleniID;
    private javax.swing.JTextField txtZaposleniIme;
    private javax.swing.JTextField txtZaposleniPrezime;
    // End of variables declaration//GEN-END:variables

    private void popuniPodatkeUcitanogZaposlenog(Zaposleni ucitaniZaposleni) {
        txtZaposleniID.setText(String.valueOf(ucitaniZaposleni.getZaposleniId()));
        txtZaposleniIme.setText(ucitaniZaposleni.getIme());
        txtZaposleniPrezime.setText(ucitaniZaposleni.getPrezime());
        txtZaposleniEmail.setText(ucitaniZaposleni.getEmail());
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy.");
        txtZaposleniDatumZaposlenja.setText(sdf.format(ucitaniZaposleni.getDatumZaposlenja()));
        cmbZaposleniOrganizacionaCelina.setSelectedItem(ucitaniZaposleni.getOrganizacionaCelina());
        cmbZaposleniRadnoMesto.setSelectedItem(ucitaniZaposleni.getRadnoMesto());
    }

    private void popuniTabeluSvimZaposlenim() throws Exception {
        LinkedList<Zaposleni> listaSvihZaposlnih = KlijentKontrolerZaposleni.getInstanca().vratiZaposlene();
        if (listaSvihZaposlnih.size() > 0) {
            ModelTabeleZaposleni mtz = (ModelTabeleZaposleni) tblZaposleni.getModel();
            mtz.setListaZaposlenih(listaSvihZaposlnih);
        } else if(listaSvihZaposlnih.size() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Ne postoji nijedan zaposleni.");
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Doslo je do greske prilikom pretrage zaposlenih.");
            this.dispose();
        }
    }

    private void popuniCmbOrganizacionaCelina() throws Exception {
        cmbZaposleniOrganizacionaCelina.removeAllItems();

        LinkedList<OrganizacionaCelina> litsaOrganizacionihCelina = KlijentKontrolerZaposleni.getInstanca().vratiOrganizacioneCeline();
        for (OrganizacionaCelina organizacionaCelina : litsaOrganizacionihCelina) {
            cmbZaposleniOrganizacionaCelina.addItem(organizacionaCelina);
        }
    }

    private void popuniCmbRadnoMesto(OrganizacionaCelina organizacionaCelina) throws Exception {
        cmbZaposleniRadnoMesto.removeAllItems();

        try{
            LinkedList<RadnoMesto> listaRadnihMesta = KlijentKontrolerZaposleni.getInstanca().vratiRadnaMesta(organizacionaCelina);
            for (RadnoMesto radnoMesto : listaRadnihMesta) {
                cmbZaposleniRadnoMesto.addItem(radnoMesto);
            }
        } catch(Exception ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Doslo je do greske!", JOptionPane.ERROR_MESSAGE);
        }
        
    }

    private boolean proveriNovePodatke(Zaposleni izmenjenZaposleni) throws Exception {
        izmenjenZaposleni.setZaposleniId(Integer.parseInt(txtZaposleniID.getText()));
        
        String ime = txtZaposleniIme.getText().trim();
            if (ime.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Polje Ime ne sme biti prazno.", "Greska pri izmeni zaposlenog!", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        izmenjenZaposleni.setIme(ime);
        
        String prezime = txtZaposleniPrezime.getText().trim();
            if (prezime.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Polje Prezime ne sme biti prazno.", "Greska pri izmeni zaposlenog!", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        izmenjenZaposleni.setPrezime(prezime);
        
        String email = txtZaposleniEmail.getText().trim();
            if (email.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Polje Email ne sme biti prazno.", "Greska pri izmeni zaposlenog!", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            LinkedList<Zaposleni> listaZaposlenih = KlijentKontrolerZaposleni.getInstanca().vratiZaposlene();
            for (Zaposleni zaposleni : listaZaposlenih) {
                if(zaposleni.getEmail().equals(email) && zaposleni.getZaposleniId() != Integer.parseInt(txtZaposleniID.getText())){
                    JOptionPane.showMessageDialog(null, "Vec postoji korisnik sa unetim Email-om.", "Greska pri izmeni zaposlenog!", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        izmenjenZaposleni.setEmail(email);
        
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy.");
        izmenjenZaposleni.setDatumZaposlenja(sdf.parse(txtZaposleniDatumZaposlenja.getText()));
        
        izmenjenZaposleni.setOrganizacionaCelina((OrganizacionaCelina) cmbZaposleniOrganizacionaCelina.getSelectedItem());
        
        izmenjenZaposleni.setRadnoMesto((RadnoMesto) cmbZaposleniRadnoMesto.getSelectedItem());
            
        return true;
    }
}
